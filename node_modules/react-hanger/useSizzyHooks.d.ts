import { RefObject } from 'react';
export declare const useCanHover: () => boolean;
export declare const useHovered: () => {
    value: boolean;
    setValue: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    bind: {
        onMouseOver: () => void;
        onMouseLeave: () => void;
        onClick?: undefined;
    } | {
        onClick: () => void;
        onMouseOver?: undefined;
        onMouseLeave?: undefined;
    };
};
export declare const usePose: (initial: string, poses?: object) => {
    pose: string;
    setPose: import("react").Dispatch<import("react").SetStateAction<string>>;
    poses: object;
};
export declare const useVisiblePose: (initial: any) => (string | ((v: any) => void) | {
    poses: object;
})[];
export declare const useFindElementCenter: (elementRef: RefObject<HTMLElement>) => {
    x: number;
    y: number;
} | undefined;
export declare const useMousePosition: (shouldTrack: boolean) => {};
export declare type TimeFormattingFunction = (date: Date) => string;
export declare const useClock: (timeFormattingFunction?: TimeFormattingFunction) => string;
