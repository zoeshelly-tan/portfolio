import { useCallback, useRef } from 'react';
import { useOnClick } from './useOnClick';
const checkOptions = (event, options) => {
    if (!options) {
        return true;
    }
    const { blacklistClassNames = [], blacklistElements = [] } = options;
    const passesClassnames = event.path.every((element) => {
        return blacklistClassNames.every((cn) => (element.classList ? !element.classList.contains(cn) : true));
    });
    const passesElements = blacklistElements.every((elem) => { var _a; return ((_a = event.target) === null || _a === void 0 ? void 0 : _a.tagName) !== elem; });
    return passesClassnames && passesElements;
};
export const useOnClickOutside = (fn, options) => {
    const elementRef = useRef(null);
    const handleClick = useCallback((event) => {
        var _a;
        if (!((_a = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) && checkOptions(event, options)) {
            // clicked outside the ref
            fn();
        }
    }, [fn, options]);
    useOnClick(handleClick);
    return elementRef;
};
//# sourceMappingURL=useClickOutside.js.map