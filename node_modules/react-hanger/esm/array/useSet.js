import { useCallback, useMemo, useState } from 'react';
const clone = (value) => new Set(value);
export function useSet(initialState = new Set()) {
    const [value, setValue] = useState(initialState);
    const add = useCallback((item) => {
        setValue((prevValue) => {
            const copy = clone(prevValue);
            copy.add(item);
            return copy;
        });
    }, []);
    const remove = useCallback((item) => {
        setValue((prevValue) => {
            const copy = clone(prevValue);
            copy.delete(item);
            return copy;
        });
    }, []);
    const clear = useCallback(() => {
        setValue((prevValue) => {
            const copy = clone(prevValue);
            copy.clear();
            return copy;
        });
    }, []);
    const actions = useMemo(() => ({
        setValue,
        add,
        remove,
        clear,
    }), [add, clear, remove]);
    return useMemo(() => [value, actions], [value, actions]);
}
//# sourceMappingURL=useSet.js.map