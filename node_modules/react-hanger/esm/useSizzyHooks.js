var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useState, useEffect, useCallback } from 'react';
export const useCanHover = () => {
    // assume that if device is smaller than 500 there's no hover, but actually check it on the first touch event
    const [canHover, setCanHover] = useState(window.innerWidth > 500);
    useEffect(() => {
        // mobile devices also emit a "mousemove" on every touch (#theplatform<3), but desktop devices don't emit "touchstart"
        const eventName = 'touchstart';
        window.addEventListener(eventName, function onFirstTouch() {
            setCanHover(false);
            window.removeEventListener(eventName, onFirstTouch, false);
        }, false);
    }, []);
    return canHover;
};
export const useHovered = () => {
    const [hovering, setHovering] = useState(false);
    const canHover = useCanHover();
    return {
        value: hovering,
        setValue: setHovering,
        bind: canHover
            ? {
                onMouseOver: () => setHovering(true),
                onMouseLeave: () => setHovering(false),
            }
            : {
                onClick: () => setHovering((h) => !h),
            },
    };
};
export const usePose = (initial, poses = {}) => {
    const [pose, setPose] = useState(initial);
    return { pose, setPose, poses };
};
export const useVisiblePose = (initial) => {
    const VISIBLE = 'visible';
    const HIDDEN = 'hidden';
    const _a = usePose(initial ? VISIBLE : HIDDEN, [HIDDEN, VISIBLE]), { setPose, pose } = _a, rest = __rest(_a, ["setPose", "pose"]);
    return [pose, (v) => setPose(v ? VISIBLE : HIDDEN), rest];
};
export const useFindElementCenter = (elementRef) => {
    const [windowSize, setWindowSize] = useState();
    useEffect(() => {
        if (elementRef.current) {
            const { offsetTop, offsetLeft, offsetWidth, offsetHeight } = elementRef.current;
            setWindowSize({
                x: window.innerWidth / 2 - offsetWidth / 2 - offsetLeft,
                y: window.innerHeight / 2 - offsetHeight / 2 - offsetTop,
            });
        }
    }, [elementRef]);
    return windowSize;
};
export const useMousePosition = (shouldTrack) => {
    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
    const canHover = useCanHover();
    useEffect(() => {
        if (canHover && shouldTrack) {
            const handler = ({ clientX, clientY }) => {
                setMousePosition({
                    x: clientX,
                    y: clientY,
                });
            };
            window.document.addEventListener('mousemove', handler);
            return () => window.document.removeEventListener('mousemove', handler);
        }
        return () => { };
    }, [canHover, shouldTrack]);
    return canHover ? mousePosition : {};
};
export const useClock = (timeFormattingFunction = (date) => date.toLocaleDateString()) => {
    const getCurrentTime = useCallback(() => timeFormattingFunction(new Date()), [timeFormattingFunction]);
    const [time, setTime] = useState(getCurrentTime());
    useEffect(() => {
        const t = setInterval(() => setTime(getCurrentTime()), 1000);
        return () => clearInterval(t);
    }, [getCurrentTime]);
    return time;
};
//# sourceMappingURL=useSizzyHooks.js.map